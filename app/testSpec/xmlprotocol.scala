// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package TestSpec
    
/**
usage:
val obj = scalaxb.fromXML[TestSpec.Foo](node)
val document = scalaxb.toXML[TestSpec.Foo](obj, "foo", TestSpec.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://www.example.org/Sikuliator",
    Some("tns") -> "http://www.example.org/Sikuliator",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val TestSpecSequencableFormat: scalaxb.XMLFormat[TestSpec.Sequencable] = new DefaultTestSpecSequencableFormat {}
  implicit lazy val TestSpecSequenceFormat: scalaxb.XMLFormat[TestSpec.Sequence] = new DefaultTestSpecSequenceFormat {}
  implicit lazy val TestSpecClickFormat: scalaxb.XMLFormat[TestSpec.Click] = new DefaultTestSpecClickFormat {}
  implicit lazy val TestSpecWaitForSomeImageFormat: scalaxb.XMLFormat[TestSpec.WaitForSomeImage] = new DefaultTestSpecWaitForSomeImageFormat {}
  implicit lazy val TestSpecEnterTextFormat: scalaxb.XMLFormat[TestSpec.EnterText] = new DefaultTestSpecEnterTextFormat {}
  implicit lazy val TestSpecTestFormat: scalaxb.XMLFormat[TestSpec.Test] = new DefaultTestSpecTestFormat {}
  implicit lazy val TestSpecUseInputFormat: scalaxb.XMLFormat[TestSpec.UseInput] = new DefaultTestSpecUseInputFormat {}
  implicit lazy val TestSpecRunSequenceFormat: scalaxb.XMLFormat[TestSpec.RunSequence] = new DefaultTestSpecRunSequenceFormat {}
  implicit lazy val TestSpecImageMatchingableFormat: scalaxb.XMLFormat[TestSpec.ImageMatchingable] = new DefaultTestSpecImageMatchingableFormat {}
  implicit lazy val TestSpecImageMatchingFormat: scalaxb.XMLFormat[TestSpec.ImageMatching] = new DefaultTestSpecImageMatchingFormat {}

  trait DefaultTestSpecSequencableFormat extends scalaxb.XMLFormat[TestSpec.Sequencable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TestSpec.Sequencable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://www.example.org/Sikuliator"), Some("Test")) => Right(scalaxb.fromXML[TestSpec.Test](node, stack))
          case _ => Right(scalaxb.fromXML[TestSpec.Sequence](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: TestSpec.Sequencable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: TestSpec.Test => scalaxb.toXML[TestSpec.Test](x, __namespace, __elementLabel, __scope, true)
      case x: TestSpec.Sequence => scalaxb.toXML[TestSpec.Sequence](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultTestSpecSequenceFormat extends scalaxb.ElemNameParser[TestSpec.Sequence] {
    val targetNamespace: Option[String] = Some("http://www.example.org/Sikuliator")
    
    override def typeName: Option[String] = Some("Sequence")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestSpec.Sequence] =
      phrase(rep(((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "click")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.Click](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "doubleClick")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.Click](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "enterText")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.EnterText](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "waitForSomethingToBeThere")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.WaitForSomeImage](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "waitForSomethingToNotBeThere")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.WaitForSomeImage](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "runSequence")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.RunSequence](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "rightClick")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.Click](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "pasteText")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.EnterText](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      TestSpec.Sequence(p1.toSeq,
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: TestSpec.Sequence, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: TestSpec.Sequence, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.sequencableoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[TestSpec.SequencableOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultTestSpecClickFormat extends scalaxb.XMLFormat[TestSpec.Click] with scalaxb.CanWriteChildNodes[TestSpec.Click] {
    val targetNamespace: Option[String] = Some("http://www.example.org/Sikuliator")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TestSpec.Click] = seq match {
      case node: scala.xml.Node => Right(TestSpec.Click(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double]((node \ "@similarity"), scalaxb.ElemName(node) :: stack),
        (node \ "@towardsTop").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@towardsRight").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: TestSpec.Click, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "similarity", __obj.similarity.toString, attr)
      __obj.towardsTop foreach { x => attr = scala.xml.Attribute(null, "towardsTop", x.toString, attr) }
      __obj.towardsRight foreach { x => attr = scala.xml.Attribute(null, "towardsRight", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: TestSpec.Click, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultTestSpecWaitForSomeImageFormat extends scalaxb.XMLFormat[TestSpec.WaitForSomeImage] with scalaxb.CanWriteChildNodes[TestSpec.WaitForSomeImage] {
    val targetNamespace: Option[String] = Some("http://www.example.org/Sikuliator")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TestSpec.WaitForSomeImage] = seq match {
      case node: scala.xml.Node => Right(TestSpec.WaitForSomeImage(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double]((node \ "@similarity"), scalaxb.ElemName(node) :: stack),
        (node \ "@secondsToWait").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: TestSpec.WaitForSomeImage, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "similarity", __obj.similarity.toString, attr)
      __obj.secondsToWait foreach { x => attr = scala.xml.Attribute(null, "secondsToWait", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: TestSpec.WaitForSomeImage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultTestSpecEnterTextFormat extends scalaxb.ElemNameParser[TestSpec.EnterText] {
    val targetNamespace: Option[String] = Some("http://www.example.org/Sikuliator")
    
    override def typeName: Option[String] = Some("EnterText")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestSpec.EnterText] =
      phrase((((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "useInput")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.UseInput](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "text")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      TestSpec.EnterText(p1) })
    
    def writesChildNodes(__obj: TestSpec.EnterText, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (Some(__obj.entertextoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)} get)

  }

  trait DefaultTestSpecTestFormat extends scalaxb.ElemNameParser[TestSpec.Test] {
    val targetNamespace: Option[String] = Some("http://www.example.org/Sikuliator")
    
    override def typeName: Option[String] = Some("Test")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestSpec.Test] =
      phrase(rep(((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "click")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.Click](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "doubleClick")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.Click](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "enterText")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.EnterText](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "waitForSomethingToBeThere")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.WaitForSomeImage](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "waitForSomethingToNotBeThere")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.WaitForSomeImage](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "runSequence")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.RunSequence](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "rightClick")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.Click](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "pasteText")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[TestSpec.EnterText](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      TestSpec.Test(p1.toSeq,
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: TestSpec.Test, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: TestSpec.Test, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.sequencableoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[TestSpec.SequencableOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultTestSpecUseInputFormat extends scalaxb.XMLFormat[TestSpec.UseInput] with scalaxb.CanWriteChildNodes[TestSpec.UseInput] {
    val targetNamespace: Option[String] = Some("http://www.example.org/Sikuliator")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TestSpec.UseInput] = seq match {
      case node: scala.xml.Node => Right(TestSpec.UseInput())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: TestSpec.UseInput, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultTestSpecRunSequenceFormat extends scalaxb.ElemNameParser[TestSpec.RunSequence] {
    val targetNamespace: Option[String] = Some("http://www.example.org/Sikuliator")
    
    override def typeName: Option[String] = Some("RunSequence")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[TestSpec.RunSequence] =
      phrase((scalaxb.ElemName(Some("http://www.example.org/Sikuliator"), "input")) ^^
      { case p1 =>
      TestSpec.RunSequence(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        (node \ "@sequenceName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: TestSpec.RunSequence, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.sequenceName foreach { x => attr = scala.xml.Attribute(null, "sequenceName", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: TestSpec.RunSequence, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.input, Some("http://www.example.org/Sikuliator"), Some("input"), __scope, false))

  }

  trait DefaultTestSpecImageMatchingableFormat extends scalaxb.XMLFormat[TestSpec.ImageMatchingable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TestSpec.ImageMatchingable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://www.example.org/Sikuliator"), Some("Click")) => Right(scalaxb.fromXML[TestSpec.Click](node, stack))
          case (Some("http://www.example.org/Sikuliator"), Some("WaitForSomeImage")) => Right(scalaxb.fromXML[TestSpec.WaitForSomeImage](node, stack))
          case _ => Right(scalaxb.fromXML[TestSpec.ImageMatching](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: TestSpec.ImageMatchingable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: TestSpec.Click => scalaxb.toXML[TestSpec.Click](x, __namespace, __elementLabel, __scope, true)
      case x: TestSpec.WaitForSomeImage => scalaxb.toXML[TestSpec.WaitForSomeImage](x, __namespace, __elementLabel, __scope, true)
      case x: TestSpec.ImageMatching => scalaxb.toXML[TestSpec.ImageMatching](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultTestSpecImageMatchingFormat extends scalaxb.XMLFormat[TestSpec.ImageMatching] with scalaxb.CanWriteChildNodes[TestSpec.ImageMatching] {
    val targetNamespace: Option[String] = Some("http://www.example.org/Sikuliator")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TestSpec.ImageMatching] = seq match {
      case node: scala.xml.Node => Right(TestSpec.ImageMatching(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Double]((node \ "@similarity"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: TestSpec.ImageMatching, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "similarity", __obj.similarity.toString, attr)
      attr
    }

    def writesChildNodes(__obj: TestSpec.ImageMatching, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }


}

